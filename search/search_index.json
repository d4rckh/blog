{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Main Page Writeups and Experiments","title":"Main Page"},{"location":"#main-page","text":"Writeups and Experiments","title":"Main Page"},{"location":"Security/Windows/Physical%20Access/Windows%20UAC%20Bypass/","text":"User Account Control is a mandatory access control enforcement feature introduced with Microsoft's Windows Vista and Windows Server 2008 operating systems, with a more relaxed version also present in Windows 7, Windows Server 2008 R2, Windows 8, Windows Server 2012 and Windows 10. (Wikipedia) When User Account Control (UAC) is enabled, Windows prompts for consent or prompts for credentials of a valid local administrator account before starting a program or task that requires a full administrator access token. This prompt ensures that no malicious software can be silently installed or run. We can bypass this using a simple trick. In this example I will use regedit \u26a0 The method below can be used in situations where there is a direct access to the system either via RDP or physical. Creating the task Press WIN+R and open taskschd.msc , Schtasks bypasses the UAC when ran on highest privileges. It does not grant you free admin access but it skips the consent prompt. Right click on Tash Schedule Library and create a new folder, I will name it uac_bypass Now create a new task, name it however you want and set Run with highest privileges check. Now go in the Actions tab and create a new action, specify the action to be Start a program and select the program you want to launch. Select the newly created task and click Run Regedit will open without any UAC prompt.","title":"Windows UAC Bypass"},{"location":"Security/Windows/Physical%20Access/Windows%20UAC%20Bypass/#creating-the-task","text":"Press WIN+R and open taskschd.msc , Schtasks bypasses the UAC when ran on highest privileges. It does not grant you free admin access but it skips the consent prompt. Right click on Tash Schedule Library and create a new folder, I will name it uac_bypass Now create a new task, name it however you want and set Run with highest privileges check. Now go in the Actions tab and create a new action, specify the action to be Start a program and select the program you want to launch. Select the newly created task and click Run Regedit will open without any UAC prompt.","title":"Creating the task"},{"location":"Writeups/HackTheBox/Blue/","text":"This post will explain the root process of Blue on hackthebox using metasploit and without Running a simple nmap scan we can see quite a lot of ports open $ nmap -A -T4 -p- 10.10.10.40 We can see rpc, netbios and microsoft-ds On port 445 we can see SMB running, nmap tells us the box runs Windows 7 Professional SP1 and that the box is in a workgroup Nmap also ran some scripts for us which tells us the hostname and more useful information like if message_signing is enabled (which won't help us in this case, but it's a good thing to know) As the name suggest this box is probably vulnerable to ms17_010 which is Eternal Blue Metasploit way We can verify that the box is vulnerable using the use auxiliary/scanner/smb/smb_ms17_010 metasploit module and setting RHOSTS to 10.10.10.40 After verifying this box is vulnerable to eternal blue we can start exploiting it using metasploit's exploit/windows/smb/ms17_010_externalblue module, do not forget to set the host to 10.10.10.40 Looking at the options on the metasploit module we can see by default generic/shell_reverse_tcp which is an unstaged payload, it's also a generic shell and it won't result in a meterpreter shell. We could change it to windows/x64/meterpreter/reverse_tcp by changing payload using set . This will result in a meterpreter shell, making things easier. WARNING : This exploit might crash the target machine. After getting the meterpreter shell we can check using getuid that we are authority system. Manual way AutoBlue is a nice way to exploit eternal blue manually, it is located @ https://github.com/3ndG4me/autoblue-ms17-010 on github. (Just follow the instructions on the readme) WARNING : This exploit also might crash the target machine.","title":"Blue"},{"location":"Writeups/HackTheBox/Blue/#metasploit-way","text":"We can verify that the box is vulnerable using the use auxiliary/scanner/smb/smb_ms17_010 metasploit module and setting RHOSTS to 10.10.10.40 After verifying this box is vulnerable to eternal blue we can start exploiting it using metasploit's exploit/windows/smb/ms17_010_externalblue module, do not forget to set the host to 10.10.10.40 Looking at the options on the metasploit module we can see by default generic/shell_reverse_tcp which is an unstaged payload, it's also a generic shell and it won't result in a meterpreter shell. We could change it to windows/x64/meterpreter/reverse_tcp by changing payload using set . This will result in a meterpreter shell, making things easier. WARNING : This exploit might crash the target machine. After getting the meterpreter shell we can check using getuid that we are authority system.","title":"Metasploit way"},{"location":"Writeups/HackTheBox/Blue/#manual-way","text":"AutoBlue is a nice way to exploit eternal blue manually, it is located @ https://github.com/3ndG4me/autoblue-ms17-010 on github. (Just follow the instructions on the readme) WARNING : This exploit also might crash the target machine.","title":"Manual way"}]}